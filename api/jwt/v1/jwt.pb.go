// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/jwt/v1/jwt.proto

package jwt

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type NewJWTRequest struct {
	KID    string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	Claims []byte `protobuf:"bytes,2,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (m *NewJWTRequest) Reset()         { *m = NewJWTRequest{} }
func (m *NewJWTRequest) String() string { return proto.CompactTextString(m) }
func (*NewJWTRequest) ProtoMessage()    {}
func (*NewJWTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_870e8e17dcde545b, []int{0}
}
func (m *NewJWTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewJWTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewJWTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewJWTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewJWTRequest.Merge(m, src)
}
func (m *NewJWTRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewJWTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewJWTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewJWTRequest proto.InternalMessageInfo

func (m *NewJWTRequest) GetKID() string {
	if m != nil {
		return m.KID
	}
	return ""
}

func (m *NewJWTRequest) GetClaims() []byte {
	if m != nil {
		return m.Claims
	}
	return nil
}

type NewJWTResponse struct {
	ID           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AccessToken  string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"access_token"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refresh_token"`
	Expiry       int64  `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry"`
}

func (m *NewJWTResponse) Reset()         { *m = NewJWTResponse{} }
func (m *NewJWTResponse) String() string { return proto.CompactTextString(m) }
func (*NewJWTResponse) ProtoMessage()    {}
func (*NewJWTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_870e8e17dcde545b, []int{1}
}
func (m *NewJWTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewJWTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewJWTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewJWTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewJWTResponse.Merge(m, src)
}
func (m *NewJWTResponse) XXX_Size() int {
	return m.Size()
}
func (m *NewJWTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_NewJWTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_NewJWTResponse proto.InternalMessageInfo

func (m *NewJWTResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *NewJWTResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *NewJWTResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *NewJWTResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type RenewJWTRequest struct {
	KID             string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	RefreshToken    string `protobuf:"bytes,2,opt,name=refreshToken,proto3" json:"refresh_token"`
	RefreshStrategy string `protobuf:"bytes,3,opt,name=refreshStrategy,proto3" json:"refresh_strategy,omitempty"`
}

func (m *RenewJWTRequest) Reset()         { *m = RenewJWTRequest{} }
func (m *RenewJWTRequest) String() string { return proto.CompactTextString(m) }
func (*RenewJWTRequest) ProtoMessage()    {}
func (*RenewJWTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_870e8e17dcde545b, []int{2}
}
func (m *RenewJWTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewJWTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewJWTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewJWTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewJWTRequest.Merge(m, src)
}
func (m *RenewJWTRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenewJWTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewJWTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewJWTRequest proto.InternalMessageInfo

func (m *RenewJWTRequest) GetKID() string {
	if m != nil {
		return m.KID
	}
	return ""
}

func (m *RenewJWTRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *RenewJWTRequest) GetRefreshStrategy() string {
	if m != nil {
		return m.RefreshStrategy
	}
	return ""
}

type RenewJWTResponse struct {
	ID           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AccessToken  string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"access_token"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refresh_token"`
	Expiry       int64  `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry"`
}

func (m *RenewJWTResponse) Reset()         { *m = RenewJWTResponse{} }
func (m *RenewJWTResponse) String() string { return proto.CompactTextString(m) }
func (*RenewJWTResponse) ProtoMessage()    {}
func (*RenewJWTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_870e8e17dcde545b, []int{3}
}
func (m *RenewJWTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewJWTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewJWTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewJWTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewJWTResponse.Merge(m, src)
}
func (m *RenewJWTResponse) XXX_Size() int {
	return m.Size()
}
func (m *RenewJWTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewJWTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RenewJWTResponse proto.InternalMessageInfo

func (m *RenewJWTResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RenewJWTResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *RenewJWTResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *RenewJWTResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

type RevokeJWTRequest struct {
	KID          string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	ID           string `protobuf:"bytes,2,opt,name=id,proto3" json:"id"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refresh_token"`
}

func (m *RevokeJWTRequest) Reset()         { *m = RevokeJWTRequest{} }
func (m *RevokeJWTRequest) String() string { return proto.CompactTextString(m) }
func (*RevokeJWTRequest) ProtoMessage()    {}
func (*RevokeJWTRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_870e8e17dcde545b, []int{4}
}
func (m *RevokeJWTRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokeJWTRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokeJWTRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokeJWTRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeJWTRequest.Merge(m, src)
}
func (m *RevokeJWTRequest) XXX_Size() int {
	return m.Size()
}
func (m *RevokeJWTRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeJWTRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeJWTRequest proto.InternalMessageInfo

func (m *RevokeJWTRequest) GetKID() string {
	if m != nil {
		return m.KID
	}
	return ""
}

func (m *RevokeJWTRequest) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *RevokeJWTRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

type RevokeJWTResponse struct {
}

func (m *RevokeJWTResponse) Reset()         { *m = RevokeJWTResponse{} }
func (m *RevokeJWTResponse) String() string { return proto.CompactTextString(m) }
func (*RevokeJWTResponse) ProtoMessage()    {}
func (*RevokeJWTResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_870e8e17dcde545b, []int{5}
}
func (m *RevokeJWTResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RevokeJWTResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RevokeJWTResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RevokeJWTResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RevokeJWTResponse.Merge(m, src)
}
func (m *RevokeJWTResponse) XXX_Size() int {
	return m.Size()
}
func (m *RevokeJWTResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RevokeJWTResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RevokeJWTResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NewJWTRequest)(nil), "jwtis.services.jwt.v1.NewJWTRequest")
	proto.RegisterType((*NewJWTResponse)(nil), "jwtis.services.jwt.v1.NewJWTResponse")
	proto.RegisterType((*RenewJWTRequest)(nil), "jwtis.services.jwt.v1.RenewJWTRequest")
	proto.RegisterType((*RenewJWTResponse)(nil), "jwtis.services.jwt.v1.RenewJWTResponse")
	proto.RegisterType((*RevokeJWTRequest)(nil), "jwtis.services.jwt.v1.RevokeJWTRequest")
	proto.RegisterType((*RevokeJWTResponse)(nil), "jwtis.services.jwt.v1.RevokeJWTResponse")
}

func init() { proto.RegisterFile("api/jwt/v1/jwt.proto", fileDescriptor_870e8e17dcde545b) }

var fileDescriptor_870e8e17dcde545b = []byte{
	// 505 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x54, 0x3d, 0x6f, 0xd3, 0x40,
	0x18, 0xee, 0xd9, 0x28, 0x22, 0x2f, 0x69, 0x9b, 0x1e, 0x45, 0x8a, 0x2c, 0x64, 0x47, 0x16, 0x1f,
	0x19, 0x82, 0xdd, 0x06, 0x31, 0xb1, 0x59, 0x08, 0x41, 0x91, 0x18, 0x4c, 0x50, 0x25, 0x90, 0xa8,
	0x1c, 0xe7, 0x9a, 0x5e, 0x42, 0x6c, 0xe3, 0xbb, 0x24, 0xe4, 0x27, 0xb0, 0xb1, 0xf2, 0x3f, 0x58,
	0x11, 0x2b, 0x63, 0x47, 0x26, 0x0b, 0x39, 0x9b, 0x7f, 0x05, 0xf2, 0xf9, 0xd2, 0x26, 0x11, 0x51,
	0x28, 0x1b, 0x8b, 0xcf, 0xf7, 0xdc, 0xf3, 0xbc, 0x1f, 0xcf, 0x7d, 0xc0, 0xbe, 0x17, 0x51, 0xbb,
	0x3f, 0xe1, 0xf6, 0xf8, 0x30, 0x1f, 0xac, 0x28, 0x0e, 0x79, 0x88, 0x6f, 0xf5, 0x27, 0x9c, 0x32,
	0x8b, 0x91, 0x78, 0x4c, 0x7d, 0xc2, 0xac, 0x7c, 0x65, 0x7c, 0xa8, 0x3d, 0xe8, 0x51, 0x7e, 0x36,
	0xea, 0x58, 0x7e, 0x38, 0xb4, 0x7b, 0x61, 0x2f, 0xb4, 0x05, 0xbb, 0x33, 0x3a, 0x15, 0x33, 0x31,
	0x11, 0x7f, 0x45, 0x14, 0xf3, 0x04, 0xb6, 0x5f, 0x92, 0xc9, 0xd1, 0x71, 0xdb, 0x25, 0x1f, 0x46,
	0x84, 0x71, 0x5c, 0x07, 0x75, 0x40, 0xbb, 0x35, 0x54, 0x47, 0x8d, 0xb2, 0xb3, 0x93, 0x26, 0x86,
	0xfa, 0xe2, 0xf9, 0x93, 0x2c, 0x31, 0x72, 0xd4, 0xcd, 0x3f, 0xb8, 0x09, 0x25, 0xff, 0xbd, 0x47,
	0x87, 0xac, 0xa6, 0xd4, 0x51, 0xa3, 0xe2, 0xec, 0x67, 0x89, 0x51, 0x2d, 0x90, 0x66, 0x38, 0xa4,
	0x9c, 0x0c, 0x23, 0x3e, 0x75, 0x25, 0xc7, 0xfc, 0x86, 0x60, 0x67, 0x9e, 0x81, 0x45, 0x61, 0xc0,
	0x08, 0xbe, 0x0d, 0xca, 0x45, 0x86, 0x4a, 0x9a, 0x18, 0x8a, 0x48, 0xa0, 0xd0, 0xae, 0xab, 0xd0,
	0x2e, 0x6e, 0xc1, 0x0d, 0xcf, 0xf7, 0x09, 0x63, 0xed, 0x70, 0x40, 0x02, 0x91, 0xa3, 0xec, 0x54,
	0xb3, 0xc4, 0xa8, 0x14, 0xf0, 0x09, 0xcf, 0x71, 0x77, 0x91, 0x84, 0x1f, 0x41, 0x25, 0x26, 0xa7,
	0x31, 0x61, 0x67, 0x85, 0x48, 0x15, 0xa2, 0xbd, 0x2c, 0x31, 0xb6, 0x25, 0x2e, 0x55, 0x4b, 0x34,
	0x6c, 0x42, 0x89, 0x7c, 0x8c, 0x68, 0x3c, 0xad, 0x5d, 0xab, 0xa3, 0x86, 0xea, 0x40, 0x96, 0x18,
	0x12, 0x71, 0xe5, 0x68, 0x7e, 0x45, 0xb0, 0xeb, 0x92, 0xe0, 0x8a, 0x1e, 0xad, 0x16, 0xa4, 0xfc,
	0x5d, 0x41, 0xcf, 0x60, 0x57, 0xce, 0x5f, 0xf1, 0xd8, 0xe3, 0xa4, 0x37, 0x95, 0xad, 0xe8, 0x59,
	0x62, 0x68, 0x73, 0x25, 0x93, 0x6b, 0x0b, 0x6e, 0xaf, 0xca, 0xcc, 0xef, 0x08, 0xaa, 0x97, 0x65,
	0xff, 0x8f, 0xc6, 0x7f, 0x12, 0x1d, 0x8c, 0xc3, 0x01, 0xb9, 0x92, 0xf3, 0x45, 0x8f, 0xca, 0x9a,
	0x1e, 0xff, 0xad, 0x5e, 0xf3, 0x26, 0xec, 0x2d, 0x94, 0x52, 0xb8, 0xd9, 0xfa, 0xa2, 0x80, 0x7a,
	0x74, 0xdc, 0xc6, 0xaf, 0xa1, 0x54, 0x1c, 0x70, 0x7c, 0xc7, 0xfa, 0xe3, 0x9d, 0xb4, 0x96, 0x6e,
	0x98, 0x76, 0x77, 0x03, 0x4b, 0x6e, 0xd6, 0x5b, 0xb8, 0x3e, 0xdf, 0x40, 0x7c, 0x6f, 0x8d, 0x64,
	0xe5, 0x60, 0x6a, 0xf7, 0x37, 0xf2, 0x64, 0xf0, 0x77, 0x50, 0xbe, 0x68, 0x08, 0xaf, 0x57, 0x2d,
	0xbb, 0xaf, 0x35, 0x36, 0x13, 0x8b, 0xf8, 0xce, 0xd3, 0x1f, 0xa9, 0x8e, 0xce, 0x53, 0x1d, 0xfd,
	0x4a, 0x75, 0xf4, 0x79, 0xa6, 0x6f, 0x9d, 0xcf, 0xf4, 0xad, 0x9f, 0x33, 0x7d, 0xeb, 0x4d, 0x73,
	0xe1, 0x7d, 0x1a, 0x78, 0xb1, 0x17, 0x70, 0x1a, 0xb4, 0x0e, 0x5a, 0x07, 0xb6, 0x08, 0x6d, 0x5f,
	0x3e, 0x75, 0x8f, 0xfb, 0x13, 0xde, 0x29, 0x89, 0x57, 0xea, 0xe1, 0xef, 0x00, 0x00, 0x00, 0xff,
	0xff, 0x61, 0x26, 0x6e, 0x96, 0x03, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JWTClient is the client API for JWT service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JWTClient interface {
	NewJWT(ctx context.Context, in *NewJWTRequest, opts ...grpc.CallOption) (*NewJWTResponse, error)
	RenewJWT(ctx context.Context, in *RenewJWTRequest, opts ...grpc.CallOption) (*RenewJWTResponse, error)
	RevokeJWT(ctx context.Context, in *RevokeJWTRequest, opts ...grpc.CallOption) (*RevokeJWTResponse, error)
}

type jWTClient struct {
	cc *grpc.ClientConn
}

func NewJWTClient(cc *grpc.ClientConn) JWTClient {
	return &jWTClient{cc}
}

func (c *jWTClient) NewJWT(ctx context.Context, in *NewJWTRequest, opts ...grpc.CallOption) (*NewJWTResponse, error) {
	out := new(NewJWTResponse)
	err := c.cc.Invoke(ctx, "/jwtis.services.jwt.v1.JWT/NewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTClient) RenewJWT(ctx context.Context, in *RenewJWTRequest, opts ...grpc.CallOption) (*RenewJWTResponse, error) {
	out := new(RenewJWTResponse)
	err := c.cc.Invoke(ctx, "/jwtis.services.jwt.v1.JWT/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTClient) RevokeJWT(ctx context.Context, in *RevokeJWTRequest, opts ...grpc.CallOption) (*RevokeJWTResponse, error) {
	out := new(RevokeJWTResponse)
	err := c.cc.Invoke(ctx, "/jwtis.services.jwt.v1.JWT/RevokeJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTServer is the server API for JWT service.
type JWTServer interface {
	NewJWT(context.Context, *NewJWTRequest) (*NewJWTResponse, error)
	RenewJWT(context.Context, *RenewJWTRequest) (*RenewJWTResponse, error)
	RevokeJWT(context.Context, *RevokeJWTRequest) (*RevokeJWTResponse, error)
}

// UnimplementedJWTServer can be embedded to have forward compatible implementations.
type UnimplementedJWTServer struct {
}

func (*UnimplementedJWTServer) NewJWT(ctx context.Context, req *NewJWTRequest) (*NewJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewJWT not implemented")
}
func (*UnimplementedJWTServer) RenewJWT(ctx context.Context, req *RenewJWTRequest) (*RenewJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RenewJWT not implemented")
}
func (*UnimplementedJWTServer) RevokeJWT(ctx context.Context, req *RevokeJWTRequest) (*RevokeJWTResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RevokeJWT not implemented")
}

func RegisterJWTServer(s *grpc.Server, srv JWTServer) {
	s.RegisterService(&_JWT_serviceDesc, srv)
}

func _JWT_NewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).NewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtis.services.jwt.v1.JWT/NewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).NewJWT(ctx, req.(*NewJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWT_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtis.services.jwt.v1.JWT/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).RenewJWT(ctx, req.(*RenewJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWT_RevokeJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RevokeJWTRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTServer).RevokeJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtis.services.jwt.v1.JWT/RevokeJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTServer).RevokeJWT(ctx, req.(*RevokeJWTRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JWT_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jwtis.services.jwt.v1.JWT",
	HandlerType: (*JWTServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewJWT",
			Handler:    _JWT_NewJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _JWT_RenewJWT_Handler,
		},
		{
			MethodName: "RevokeJWT",
			Handler:    _JWT_RevokeJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/jwt/v1/jwt.proto",
}

func (m *NewJWTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewJWTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewJWTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Claims) > 0 {
		i -= len(m.Claims)
		copy(dAtA[i:], m.Claims)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.Claims)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KID) > 0 {
		i -= len(m.KID)
		copy(dAtA[i:], m.KID)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.KID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *NewJWTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewJWTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *NewJWTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintJwt(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenewJWTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewJWTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewJWTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefreshStrategy) > 0 {
		i -= len(m.RefreshStrategy)
		copy(dAtA[i:], m.RefreshStrategy)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.RefreshStrategy)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KID) > 0 {
		i -= len(m.KID)
		copy(dAtA[i:], m.KID)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.KID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RenewJWTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewJWTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RenewJWTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Expiry != 0 {
		i = encodeVarintJwt(dAtA, i, uint64(m.Expiry))
		i--
		dAtA[i] = 0x20
	}
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.AccessToken) > 0 {
		i -= len(m.AccessToken)
		copy(dAtA[i:], m.AccessToken)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.AccessToken)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevokeJWTRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeJWTRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokeJWTRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RefreshToken) > 0 {
		i -= len(m.RefreshToken)
		copy(dAtA[i:], m.RefreshToken)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.RefreshToken)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.ID) > 0 {
		i -= len(m.ID)
		copy(dAtA[i:], m.ID)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.ID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.KID) > 0 {
		i -= len(m.KID)
		copy(dAtA[i:], m.KID)
		i = encodeVarintJwt(dAtA, i, uint64(len(m.KID)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *RevokeJWTResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RevokeJWTResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *RevokeJWTResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintJwt(dAtA []byte, offset int, v uint64) int {
	offset -= sovJwt(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *NewJWTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KID)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.Claims)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	return n
}

func (m *NewJWTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovJwt(uint64(m.Expiry))
	}
	return n
}

func (m *RenewJWTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KID)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.RefreshStrategy)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	return n
}

func (m *RenewJWTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovJwt(uint64(m.Expiry))
	}
	return n
}

func (m *RevokeJWTRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.KID)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovJwt(uint64(l))
	}
	return n
}

func (m *RevokeJWTResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovJwt(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozJwt(x uint64) (n int) {
	return sovJwt(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewJWTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJwt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewJWTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewJWTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims[:0], dAtA[iNdEx:postIndex]...)
			if m.Claims == nil {
				m.Claims = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJwt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *NewJWTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJwt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewJWTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewJWTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJwt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewJWTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJwt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewJWTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewJWTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJwt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewJWTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJwt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewJWTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewJWTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipJwt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeJWTRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJwt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeJWTRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeJWTRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthJwt
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthJwt
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipJwt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RevokeJWTResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowJwt
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RevokeJWTResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RevokeJWTResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipJwt(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthJwt
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipJwt(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowJwt
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowJwt
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthJwt
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupJwt
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthJwt
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthJwt        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowJwt          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupJwt = fmt.Errorf("proto: unexpected end of group")
)
