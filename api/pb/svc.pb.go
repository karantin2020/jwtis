// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: api/pb/svc.proto

package jwtispb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NewTokenRequest contains new token info
type NewTokenRequest struct {
	Kid    string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	Claims []byte `protobuf:"bytes,2,opt,name=claims,proto3" json:"claims"`
}

func (m *NewTokenRequest) Reset()         { *m = NewTokenRequest{} }
func (m *NewTokenRequest) String() string { return proto.CompactTextString(m) }
func (*NewTokenRequest) ProtoMessage()    {}
func (*NewTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{0}
}
func (m *NewTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTokenRequest.Merge(m, src)
}
func (m *NewTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewTokenRequest proto.InternalMessageInfo

func (m *NewTokenRequest) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *NewTokenRequest) GetClaims() []byte {
	if m != nil {
		return m.Claims
	}
	return nil
}

// RenewTokenRequest contains renew token info
type RenewTokenRequest struct {
	Kid             string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	RefreshToken    string `protobuf:"bytes,2,opt,name=refreshToken,proto3" json:"refreshToken"`
	RefreshStrategy string `protobuf:"bytes,3,opt,name=refreshStrategy,proto3" json:"refreshStrategy"`
}

func (m *RenewTokenRequest) Reset()         { *m = RenewTokenRequest{} }
func (m *RenewTokenRequest) String() string { return proto.CompactTextString(m) }
func (*RenewTokenRequest) ProtoMessage()    {}
func (*RenewTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{1}
}
func (m *RenewTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewTokenRequest.Merge(m, src)
}
func (m *RenewTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenewTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewTokenRequest proto.InternalMessageInfo

func (m *RenewTokenRequest) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *RenewTokenRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *RenewTokenRequest) GetRefreshStrategy() string {
	if m != nil {
		return m.RefreshStrategy
	}
	return ""
}

// TokenResponse is sent for any token request
type TokenResponse struct {
	ID           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id"`
	AccessToken  string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refreshToken"`
	Expiry       int64  `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{2}
}
func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *TokenResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *TokenResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

// Token represents the credentials used to authenticate
// the requests
// This is a copy of https://github.com/golang/oauth2 Token
type Token struct {
	// AccessToken is the token that authenticates
	// the requests
	AccessToken string `protobuf:"bytes,1,opt,name=accessToken,proto3" json:"access_token"`
	// TokenType is the type of token.
	// The Type method returns either this or "Bearer".
	// By default this field is empty for jwtis purposes
	TokenType string `protobuf:"bytes,2,opt,name=tokenType,proto3" json:"token_type"`
	// RefreshToken is a token that's used by the application
	// (as opposed to the user) to refresh the access token
	// if it expires.
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refresh_token"`
	// Expiry is the optional expiration time of the access token.
	//
	// If zero, TokenSource implementations will reuse the same
	// token forever and RefreshToken or equivalent
	// mechanisms for that TokenSource will not be used.
	Expiry int64 `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry"`
	// raw optionally contains extra metadata from the server
	// when updating a token.
	raw []byte `protobuf:"bytes,5,opt,name=raw,proto3" json:""`
}

func (m *Token) Reset()         { *m = Token{} }
func (m *Token) String() string { return proto.CompactTextString(m) }
func (*Token) ProtoMessage()    {}
func (*Token) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{3}
}
func (m *Token) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Token) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Token.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Token) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Token.Merge(m, src)
}
func (m *Token) XXX_Size() int {
	return m.Size()
}
func (m *Token) XXX_DiscardUnknown() {
	xxx_messageInfo_Token.DiscardUnknown(m)
}

var xxx_messageInfo_Token proto.InternalMessageInfo

func (m *Token) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *Token) GetTokenType() string {
	if m != nil {
		return m.TokenType
	}
	return ""
}

func (m *Token) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *Token) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *Token) Getraw() []byte {
	if m != nil {
		return m.raw
	}
	return nil
}

// RegisterClientRequest sent to jwtis to register new client
type RegisterClientRequest struct {
	Kid        string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	Expiry     int64  `protobuf:"varint,2,opt,name=expiry,proto3" json:"expiry"`
	SigAlg     string `protobuf:"bytes,3,opt,name=sigAlg,proto3" json:"sig_alg"`
	SigBits    int32  `protobuf:"varint,4,opt,name=sigBits,proto3" json:"sig_bits"`
	EncAlg     string `protobuf:"bytes,5,opt,name=encAlg,proto3" json:"enc_alg"`
	EncBits    int32  `protobuf:"varint,6,opt,name=encBits,proto3" json:"enc_bits"`
	AuthTTL    int64  `protobuf:"varint,7,opt,name=authTTL,proto3" json:"auth_ttl"`
	RefreshTTL int64  `protobuf:"varint,8,opt,name=refreshTTL,proto3" json:"refresh_ttl"`
	// RefreshStrategy is used in RenewJWT to decide wheather to issue new refresh token
	// with access token or not
	// this option applies to all renewJWT requests
	RefreshStrategy string `protobuf:"bytes,9,opt,name=refreshStrategy,proto3" json:"refresh_strategy"`
}

func (m *RegisterClientRequest) Reset()         { *m = RegisterClientRequest{} }
func (m *RegisterClientRequest) String() string { return proto.CompactTextString(m) }
func (*RegisterClientRequest) ProtoMessage()    {}
func (*RegisterClientRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{4}
}
func (m *RegisterClientRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterClientRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterClientRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterClientRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientRequest.Merge(m, src)
}
func (m *RegisterClientRequest) XXX_Size() int {
	return m.Size()
}
func (m *RegisterClientRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientRequest proto.InternalMessageInfo

func (m *RegisterClientRequest) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *RegisterClientRequest) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *RegisterClientRequest) GetSigAlg() string {
	if m != nil {
		return m.SigAlg
	}
	return ""
}

func (m *RegisterClientRequest) GetSigBits() int32 {
	if m != nil {
		return m.SigBits
	}
	return 0
}

func (m *RegisterClientRequest) GetEncAlg() string {
	if m != nil {
		return m.EncAlg
	}
	return ""
}

func (m *RegisterClientRequest) GetEncBits() int32 {
	if m != nil {
		return m.EncBits
	}
	return 0
}

func (m *RegisterClientRequest) GetAuthTTL() int64 {
	if m != nil {
		return m.AuthTTL
	}
	return 0
}

func (m *RegisterClientRequest) GetRefreshTTL() int64 {
	if m != nil {
		return m.RefreshTTL
	}
	return 0
}

func (m *RegisterClientRequest) GetRefreshStrategy() string {
	if m != nil {
		return m.RefreshStrategy
	}
	return ""
}

// RegisterClientResponse sent to client after it's registration
type RegisterClientResponse struct {
	Kid         string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	ClientToken string `protobuf:"bytes,2,opt,name=clientToken,proto3" json:"client_token"`
	PubSigKey   []byte `protobuf:"bytes,3,opt,name=pubSigKey,proto3" json:"pub_sig_key"`
	PubEncKey   []byte `protobuf:"bytes,4,opt,name=pubEncKey,proto3" json:"pub_enc_key"`
	Expiry      int64  `protobuf:"varint,5,opt,name=expiry,proto3" json:"expiry"`
	Valid       bool   `protobuf:"varint,6,opt,name=valid,proto3" json:"valid"`
}

func (m *RegisterClientResponse) Reset()         { *m = RegisterClientResponse{} }
func (m *RegisterClientResponse) String() string { return proto.CompactTextString(m) }
func (*RegisterClientResponse) ProtoMessage()    {}
func (*RegisterClientResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{5}
}
func (m *RegisterClientResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RegisterClientResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RegisterClientResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RegisterClientResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RegisterClientResponse.Merge(m, src)
}
func (m *RegisterClientResponse) XXX_Size() int {
	return m.Size()
}
func (m *RegisterClientResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_RegisterClientResponse.DiscardUnknown(m)
}

var xxx_messageInfo_RegisterClientResponse proto.InternalMessageInfo

func (m *RegisterClientResponse) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *RegisterClientResponse) GetClientToken() string {
	if m != nil {
		return m.ClientToken
	}
	return ""
}

func (m *RegisterClientResponse) GetPubSigKey() []byte {
	if m != nil {
		return m.PubSigKey
	}
	return nil
}

func (m *RegisterClientResponse) GetPubEncKey() []byte {
	if m != nil {
		return m.PubEncKey
	}
	return nil
}

func (m *RegisterClientResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

func (m *RegisterClientResponse) GetValid() bool {
	if m != nil {
		return m.Valid
	}
	return false
}

// PubKeysRequest fetch public keys
type PubKeysRequest struct {
	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
}

func (m *PubKeysRequest) Reset()         { *m = PubKeysRequest{} }
func (m *PubKeysRequest) String() string { return proto.CompactTextString(m) }
func (*PubKeysRequest) ProtoMessage()    {}
func (*PubKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{6}
}
func (m *PubKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeysRequest.Merge(m, src)
}
func (m *PubKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *PubKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeysRequest proto.InternalMessageInfo

func (m *PubKeysRequest) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

// PubKeysResponse holds public keys
type PubKeysResponse struct {
	Kid       string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
	PubSigKey []byte `protobuf:"bytes,2,opt,name=pubSigKey,proto3" json:"pub_sig_key"`
	PubEncKey []byte `protobuf:"bytes,3,opt,name=pubEncKey,proto3" json:"pub_enc_key"`
}

func (m *PubKeysResponse) Reset()         { *m = PubKeysResponse{} }
func (m *PubKeysResponse) String() string { return proto.CompactTextString(m) }
func (*PubKeysResponse) ProtoMessage()    {}
func (*PubKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{7}
}
func (m *PubKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *PubKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_PubKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *PubKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PubKeysResponse.Merge(m, src)
}
func (m *PubKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *PubKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_PubKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_PubKeysResponse proto.InternalMessageInfo

func (m *PubKeysResponse) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *PubKeysResponse) GetPubSigKey() []byte {
	if m != nil {
		return m.PubSigKey
	}
	return nil
}

func (m *PubKeysResponse) GetPubEncKey() []byte {
	if m != nil {
		return m.PubEncKey
	}
	return nil
}

// DelKeysRequest with kid field
type DelKeysRequest struct {
	Kid string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid"`
}

func (m *DelKeysRequest) Reset()         { *m = DelKeysRequest{} }
func (m *DelKeysRequest) String() string { return proto.CompactTextString(m) }
func (*DelKeysRequest) ProtoMessage()    {}
func (*DelKeysRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{8}
}
func (m *DelKeysRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelKeysRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelKeysRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelKeysRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelKeysRequest.Merge(m, src)
}
func (m *DelKeysRequest) XXX_Size() int {
	return m.Size()
}
func (m *DelKeysRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_DelKeysRequest.DiscardUnknown(m)
}

var xxx_messageInfo_DelKeysRequest proto.InternalMessageInfo

func (m *DelKeysRequest) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

// DelKeysResponse as empty struct
type DelKeysResponse struct {
}

func (m *DelKeysResponse) Reset()         { *m = DelKeysResponse{} }
func (m *DelKeysResponse) String() string { return proto.CompactTextString(m) }
func (*DelKeysResponse) ProtoMessage()    {}
func (*DelKeysResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_9f1fddc96537f73c, []int{9}
}
func (m *DelKeysResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DelKeysResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DelKeysResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DelKeysResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DelKeysResponse.Merge(m, src)
}
func (m *DelKeysResponse) XXX_Size() int {
	return m.Size()
}
func (m *DelKeysResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_DelKeysResponse.DiscardUnknown(m)
}

var xxx_messageInfo_DelKeysResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*NewTokenRequest)(nil), "jwtispb.NewTokenRequest")
	proto.RegisterType((*RenewTokenRequest)(nil), "jwtispb.RenewTokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "jwtispb.TokenResponse")
	proto.RegisterType((*Token)(nil), "jwtispb.Token")
	proto.RegisterType((*RegisterClientRequest)(nil), "jwtispb.RegisterClientRequest")
	proto.RegisterType((*RegisterClientResponse)(nil), "jwtispb.RegisterClientResponse")
	proto.RegisterType((*PubKeysRequest)(nil), "jwtispb.PubKeysRequest")
	proto.RegisterType((*PubKeysResponse)(nil), "jwtispb.PubKeysResponse")
	proto.RegisterType((*DelKeysRequest)(nil), "jwtispb.DelKeysRequest")
	proto.RegisterType((*DelKeysResponse)(nil), "jwtispb.DelKeysResponse")
}

func init() { proto.RegisterFile("api/pb/svc.proto", fileDescriptor_9f1fddc96537f73c) }

var fileDescriptor_9f1fddc96537f73c = []byte{
	// 1210 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x56, 0x4d, 0x6f, 0x1b, 0x45,
	0x18, 0xce, 0xae, 0x6b, 0x27, 0x9e, 0xa4, 0x75, 0x3a, 0x6d, 0x53, 0x63, 0x5a, 0xef, 0xb2, 0x55,
	0xa1, 0x1f, 0x89, 0xd7, 0x71, 0x53, 0x24, 0x22, 0x81, 0x14, 0x53, 0x90, 0xea, 0x56, 0x55, 0xb5,
	0x31, 0x2a, 0x27, 0xa2, 0xf5, 0x7a, 0xba, 0x9e, 0x78, 0x33, 0xbb, 0xec, 0xcc, 0xda, 0xb5, 0x10,
	0x17, 0x6e, 0x84, 0x0b, 0x0a, 0x77, 0x2e, 0xdc, 0xf8, 0x09, 0x9c, 0x39, 0xc0, 0x01, 0xa9, 0x12,
	0x17, 0x4e, 0x2b, 0x48, 0x38, 0xed, 0xaf, 0x40, 0x33, 0xbb, 0xfe, 0xb6, 0x49, 0xa2, 0x5e, 0xbc,
	0x9e, 0x67, 0x9e, 0x79, 0xde, 0xaf, 0x79, 0x67, 0x06, 0xac, 0x9a, 0x1e, 0xd6, 0xbd, 0x86, 0x4e,
	0x3b, 0x56, 0xc9, 0xf3, 0x5d, 0xe6, 0xc2, 0xc5, 0xfd, 0x2e, 0xc3, 0xd4, 0x6b, 0x14, 0x6e, 0xd8,
	0xae, 0x6b, 0x3b, 0x48, 0xe7, 0x0c, 0x93, 0x10, 0x97, 0x99, 0x0c, 0xbb, 0x84, 0xc6, 0xb4, 0xc2,
	0xba, 0xf8, 0x58, 0x1b, 0x36, 0x22, 0x1b, 0xb4, 0x6b, 0xda, 0x36, 0xf2, 0x75, 0xd7, 0x13, 0x8c,
	0x19, 0xec, 0x0d, 0x1b, 0xb3, 0x56, 0xd0, 0x28, 0x59, 0xee, 0x81, 0x6e, 0xbb, 0xb6, 0xab, 0x0b,
	0xb8, 0x11, 0xbc, 0x14, 0x23, 0x31, 0x10, 0xff, 0x62, 0xba, 0xf6, 0x1c, 0xe4, 0x9e, 0xa1, 0x6e,
	0xdd, 0x6d, 0x23, 0x62, 0xa0, 0x2f, 0x03, 0x44, 0x19, 0x7c, 0x0b, 0xa4, 0xda, 0xb8, 0x99, 0x97,
	0x54, 0xe9, 0x4e, 0xb6, 0xba, 0x18, 0x85, 0x0a, 0x1f, 0x1a, 0xfc, 0x07, 0x6a, 0x20, 0x63, 0x39,
	0x26, 0x3e, 0xa0, 0x79, 0x59, 0x95, 0xee, 0xac, 0x54, 0x41, 0x14, 0x2a, 0x09, 0x62, 0x24, 0x5f,
	0xed, 0x27, 0x09, 0x5c, 0x36, 0x10, 0x39, 0xbb, 0xe8, 0x16, 0x58, 0xf1, 0xd1, 0x4b, 0x1f, 0xd1,
	0x96, 0x58, 0x21, 0xa4, 0xb3, 0xd5, 0xd5, 0x28, 0x54, 0xc6, 0x70, 0x63, 0x6c, 0x04, 0x3f, 0x04,
	0xb9, 0x64, 0xbc, 0xcb, 0x7c, 0x93, 0x21, 0xbb, 0x97, 0x4f, 0x89, 0x85, 0x57, 0xa2, 0x50, 0x99,
	0x9c, 0x32, 0x26, 0x01, 0xed, 0x17, 0x09, 0x5c, 0x4c, 0x1c, 0xa4, 0x9e, 0x4b, 0x28, 0x82, 0x37,
	0x80, 0x3c, 0x70, 0x70, 0xe5, 0x38, 0x54, 0xe4, 0xc7, 0x8f, 0xa2, 0x50, 0x91, 0x71, 0xd3, 0x90,
	0x71, 0x13, 0x6e, 0x82, 0x65, 0xd3, 0xb2, 0x10, 0xa5, 0xa3, 0x3e, 0xe6, 0xa2, 0x50, 0x19, 0x85,
	0x8d, 0xd1, 0xc1, 0x54, 0x5c, 0xa9, 0x33, 0xc5, 0xa5, 0x81, 0x0c, 0x7a, 0xe5, 0x61, 0xbf, 0x97,
	0xbf, 0xa0, 0x4a, 0x77, 0x52, 0x71, 0x8a, 0x63, 0xc4, 0x48, 0xbe, 0xda, 0x89, 0x04, 0xd2, 0x31,
	0xbb, 0x32, 0xee, 0x96, 0x34, 0x34, 0x11, 0xc3, 0x7b, 0x6c, 0xda, 0xaf, 0x75, 0x90, 0x15, 0x68,
	0xbd, 0xe7, 0xa1, 0x24, 0x90, 0x4b, 0x51, 0xa8, 0x00, 0x01, 0xee, 0xb1, 0x9e, 0x87, 0x8c, 0x21,
	0x01, 0x3e, 0x9c, 0x19, 0xc5, 0xe5, 0x28, 0x54, 0x2e, 0x26, 0x78, 0x62, 0xe3, 0xdc, 0x61, 0xc0,
	0x9b, 0x20, 0xe5, 0x9b, 0xdd, 0x7c, 0x5a, 0x6c, 0xa5, 0xe5, 0xe3, 0x50, 0xe1, 0xc3, 0x28, 0x54,
	0x16, 0x0c, 0xfe, 0x47, 0xfb, 0x36, 0x05, 0xae, 0x19, 0xc8, 0xc6, 0x94, 0x21, 0xff, 0x63, 0x07,
	0x23, 0xc2, 0xce, 0xb6, 0x43, 0x13, 0xbb, 0xf2, 0x5c, 0xbb, 0xb7, 0x40, 0x86, 0x62, 0x7b, 0xc7,
	0xb1, 0x93, 0x60, 0x96, 0xa3, 0x50, 0x59, 0xa4, 0xd8, 0xde, 0x33, 0x1d, 0xdb, 0x48, 0xa6, 0xe0,
	0xbb, 0x80, 0x43, 0x55, 0xcc, 0xa8, 0x88, 0x20, 0x5d, 0x5d, 0x89, 0x42, 0x65, 0x89, 0xb3, 0x1a,
	0x98, 0x51, 0xa3, 0x3f, 0xc9, 0xc5, 0x10, 0xb1, 0xb8, 0x58, 0x7a, 0x28, 0x86, 0x88, 0x15, 0x8b,
	0xc5, 0x53, 0x5c, 0x0c, 0x11, 0x4b, 0x88, 0x65, 0x86, 0x62, 0x9c, 0x15, 0x8b, 0x25, 0x93, 0x9c,
	0x67, 0x06, 0xac, 0x55, 0xaf, 0x3f, 0xcd, 0x2f, 0x0a, 0xf7, 0x05, 0x8f, 0x43, 0x7b, 0x8c, 0x39,
	0x46, 0x7f, 0x12, 0xea, 0x00, 0xf4, 0xb3, 0x5d, 0x7f, 0x9a, 0x5f, 0x12, 0x54, 0xb1, 0x19, 0x07,
	0x25, 0x61, 0x8e, 0x31, 0x42, 0x81, 0x1f, 0x4d, 0x77, 0x4b, 0x56, 0xb8, 0x7b, 0x35, 0x0a, 0x95,
	0xd5, 0xfe, 0x2a, 0x3a, 0xb7, 0x5d, 0x0e, 0x65, 0xb0, 0x36, 0x59, 0x8b, 0xa4, 0x6f, 0xfe, 0xa7,
	0x18, 0x15, 0xb0, 0x6c, 0x09, 0xf2, 0x54, 0x63, 0xc7, 0x70, 0x7f, 0x77, 0x8e, 0x90, 0xe0, 0x06,
	0xc8, 0x7a, 0x41, 0x63, 0x17, 0xdb, 0x4f, 0x50, 0xdc, 0xd1, 0x2b, 0x71, 0x64, 0x5e, 0xd0, 0xd8,
	0xe3, 0xd9, 0x6f, 0xa3, 0x9e, 0x31, 0x64, 0x24, 0xf4, 0x4f, 0x88, 0xc5, 0xe9, 0x17, 0xc6, 0xe9,
	0x3c, 0xbf, 0x7d, 0x7a, 0xcc, 0x18, 0xd9, 0x1e, 0xe9, 0xb9, 0xdb, 0x43, 0x01, 0xe9, 0x8e, 0xe9,
	0xe0, 0xa6, 0x28, 0xd5, 0x52, 0x35, 0x1b, 0x85, 0x4a, 0x0c, 0x18, 0xf1, 0x47, 0xbb, 0x0f, 0x2e,
	0x3d, 0x0f, 0x1a, 0x4f, 0x50, 0x8f, 0x9e, 0xbe, 0x21, 0xb5, 0x43, 0x09, 0xe4, 0x06, 0xec, 0xd3,
	0x53, 0x36, 0x16, 0xbe, 0x7c, 0xbe, 0xf0, 0x53, 0xa7, 0x85, 0xcf, 0x3d, 0x7f, 0x84, 0x9c, 0x33,
	0x7a, 0x7e, 0x19, 0xe4, 0x06, 0xe4, 0xd8, 0xf1, 0xca, 0x1f, 0x4b, 0x20, 0x5d, 0x7b, 0x51, 0x7f,
	0xbc, 0x0b, 0x7f, 0x94, 0x41, 0xe6, 0x19, 0xea, 0xd6, 0x5e, 0xd4, 0x61, 0xbe, 0x94, 0xdc, 0x63,
	0xa5, 0x89, 0x9b, 0xa4, 0xb0, 0x36, 0x98, 0x19, 0x3b, 0x6a, 0xb5, 0x7f, 0xa4, 0xa3, 0x9d, 0x5f,
	0x25, 0xb8, 0xb6, 0x1b, 0x1c, 0x1c, 0x98, 0x7e, 0x6f, 0x5b, 0x7d, 0x86, 0xba, 0x6a, 0xed, 0x45,
	0x5d, 0x15, 0xfb, 0xa1, 0x70, 0xe5, 0x31, 0xa5, 0x01, 0x52, 0xc9, 0x28, 0x58, 0x2b, 0x83, 0xd4,
	0x56, 0xb9, 0x0c, 0xef, 0x82, 0xf7, 0x0c, 0xc4, 0x02, 0x9f, 0xa0, 0xa6, 0xda, 0x6d, 0x21, 0xa2,
	0x62, 0x22, 0x8a, 0xa2, 0xfa, 0xb1, 0x4d, 0xb5, 0x69, 0x32, 0x53, 0xa5, 0x88, 0xb0, 0xda, 0x3a,
	0x5f, 0xb1, 0x05, 0x6f, 0x83, 0x5b, 0xe3, 0x2b, 0x2c, 0xbf, 0xe7, 0x31, 0x57, 0x6d, 0xa3, 0x1e,
	0x55, 0x89, 0xcb, 0xd4, 0x97, 0x6e, 0x40, 0x9a, 0xb5, 0x87, 0x20, 0xf5, 0xb0, 0x5c, 0x86, 0x25,
	0xb0, 0x3e, 0xa9, 0xcf, 0x90, 0x4f, 0x4c, 0x47, 0xa5, 0xc8, 0xef, 0x20, 0x5f, 0x45, 0xbe, 0xef,
	0xfa, 0x6a, 0xcb, 0xec, 0x20, 0xd5, 0x76, 0xd9, 0x37, 0x7f, 0xfe, 0xfb, 0x83, 0x7c, 0x45, 0xbb,
	0x24, 0xae, 0xee, 0xce, 0xa6, 0x4e, 0x50, 0x77, 0xbf, 0xcb, 0xb6, 0xa5, 0x7b, 0xf0, 0x30, 0x05,
	0x96, 0xc4, 0x35, 0xc8, 0x53, 0x54, 0x18, 0x24, 0x62, 0xea, 0x66, 0x9c, 0x9b, 0xa4, 0xdf, 0xe5,
	0xa3, 0x9d, 0x9f, 0x65, 0x98, 0x1f, 0x24, 0x49, 0x2c, 0x1d, 0x49, 0x53, 0x6e, 0x02, 0x38, 0x67,
	0xc0, 0xef, 0x73, 0xf6, 0x03, 0xa8, 0x83, 0x8d, 0xd9, 0x09, 0x4d, 0x56, 0x79, 0x3e, 0x3e, 0xc0,
	0x0c, 0x77, 0x10, 0x55, 0xd1, 0x2b, 0x4c, 0x93, 0xb4, 0x7e, 0x30, 0x6d, 0x25, 0x39, 0x32, 0x62,
	0x5f, 0x54, 0xd1, 0x4b, 0xa8, 0x59, 0xab, 0x80, 0xd4, 0x56, 0xa5, 0x02, 0xef, 0x83, 0xbb, 0xf3,
	0xca, 0x16, 0xaf, 0x8a, 0x1f, 0x0f, 0x71, 0xe1, 0xde, 0xa0, 0x14, 0xd7, 0xb4, 0xd5, 0x7e, 0x29,
	0x7c, 0x34, 0x2c, 0x06, 0xe1, 0xb5, 0x88, 0x4f, 0x2f, 0x58, 0x1c, 0xa9, 0xc5, 0x8c, 0xcb, 0xa5,
	0xa0, 0xcc, 0x9d, 0x4f, 0x0a, 0xf3, 0x8e, 0xb0, 0xf4, 0xb6, 0xb6, 0x36, 0xb4, 0x14, 0xf3, 0xf4,
	0xaf, 0xda, 0xb8, 0xf9, 0x35, 0xb7, 0xe7, 0x00, 0xf0, 0x99, 0xd7, 0x34, 0x19, 0xe2, 0xdd, 0xf3,
	0xe6, 0x16, 0x6f, 0x0a, 0x8b, 0xd7, 0x0b, 0xb0, 0x6f, 0x91, 0x97, 0x72, 0x68, 0xed, 0x73, 0xb0,
	0x98, 0x34, 0x2a, 0xbc, 0x3e, 0x90, 0x1a, 0xef, 0xf3, 0x42, 0x7e, 0x7a, 0x22, 0x11, 0x2f, 0x08,
	0xf1, 0xab, 0xf7, 0x66, 0x88, 0xc3, 0x2f, 0x00, 0x78, 0x1e, 0x34, 0x1c, 0x6c, 0x4d, 0x88, 0x8f,
	0x1f, 0x7f, 0x23, 0xe2, 0x13, 0x27, 0x5d, 0xdf, 0x73, 0x6d, 0xb6, 0xe7, 0xd5, 0xef, 0xa4, 0xa3,
	0x1d, 0x0f, 0x7e, 0x0a, 0x2e, 0x8a, 0x43, 0x45, 0xd4, 0x15, 0x5b, 0x48, 0x2b, 0xf5, 0x4f, 0x99,
	0xdb, 0x2d, 0xc6, 0x3c, 0xba, 0xad, 0xeb, 0x23, 0x8f, 0xda, 0xb6, 0xe9, 0x9b, 0x84, 0x61, 0x52,
	0x29, 0x57, 0xca, 0xba, 0xb0, 0x5b, 0x49, 0x97, 0x4b, 0x9b, 0xa5, 0xcd, 0x7b, 0xb2, 0x24, 0x57,
	0x56, 0x4d, 0xcf, 0x73, 0xb0, 0x25, 0x9e, 0xc4, 0xfa, 0x3e, 0x75, 0xc9, 0xf6, 0x14, 0xf2, 0xdb,
	0x71, 0x51, 0x7a, 0x7d, 0x5c, 0x94, 0xfe, 0x3e, 0x2e, 0x4a, 0xdf, 0x9f, 0x14, 0x17, 0x5e, 0x9f,
	0x14, 0x17, 0xfe, 0x3a, 0x29, 0x2e, 0x34, 0x32, 0xe2, 0x49, 0xfc, 0xe0, 0xbf, 0x00, 0x00, 0x00,
	0xff, 0xff, 0xf2, 0x00, 0xcb, 0x29, 0xaa, 0x0b, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JWTISClient is the client API for JWTIS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JWTISClient interface {
	// NewJWT is called to issue new jwt token
	NewJWT(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	// RenewJWT is called to refresh jwt token according
	// to refresh strategy
	RenewJWT(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	Register(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error)
	UpdateKeys(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error)
	DelKeys(ctx context.Context, in *DelKeysRequest, opts ...grpc.CallOption) (*DelKeysResponse, error)
	PublicKeys(ctx context.Context, in *PubKeysRequest, opts ...grpc.CallOption) (*PubKeysResponse, error)
}

type jWTISClient struct {
	cc *grpc.ClientConn
}

func NewJWTISClient(cc *grpc.ClientConn) JWTISClient {
	return &jWTISClient{cc}
}

func (c *jWTISClient) NewJWT(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/NewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTISClient) RenewJWT(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTISClient) Register(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error) {
	out := new(RegisterClientResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/Register", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTISClient) UpdateKeys(ctx context.Context, in *RegisterClientRequest, opts ...grpc.CallOption) (*RegisterClientResponse, error) {
	out := new(RegisterClientResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/UpdateKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTISClient) DelKeys(ctx context.Context, in *DelKeysRequest, opts ...grpc.CallOption) (*DelKeysResponse, error) {
	out := new(DelKeysResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/DelKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTISClient) PublicKeys(ctx context.Context, in *PubKeysRequest, opts ...grpc.CallOption) (*PubKeysResponse, error) {
	out := new(PubKeysResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/PublicKeys", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTISServer is the server API for JWTIS service.
type JWTISServer interface {
	// NewJWT is called to issue new jwt token
	NewJWT(context.Context, *NewTokenRequest) (*TokenResponse, error)
	// RenewJWT is called to refresh jwt token according
	// to refresh strategy
	RenewJWT(context.Context, *RenewTokenRequest) (*TokenResponse, error)
	Register(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error)
	UpdateKeys(context.Context, *RegisterClientRequest) (*RegisterClientResponse, error)
	DelKeys(context.Context, *DelKeysRequest) (*DelKeysResponse, error)
	PublicKeys(context.Context, *PubKeysRequest) (*PubKeysResponse, error)
}

func RegisterJWTISServer(s *grpc.Server, srv JWTISServer) {
	s.RegisterService(&_JWTIS_serviceDesc, srv)
}

func _JWTIS_NewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).NewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/NewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).NewJWT(ctx, req.(*NewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTIS_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).RenewJWT(ctx, req.(*RenewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTIS_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/Register",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).Register(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTIS_UpdateKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterClientRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).UpdateKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/UpdateKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).UpdateKeys(ctx, req.(*RegisterClientRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTIS_DelKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DelKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).DelKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/DelKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).DelKeys(ctx, req.(*DelKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTIS_PublicKeys_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PubKeysRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).PublicKeys(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/PublicKeys",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).PublicKeys(ctx, req.(*PubKeysRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JWTIS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jwtispb.JWTIS",
	HandlerType: (*JWTISServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewJWT",
			Handler:    _JWTIS_NewJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _JWTIS_RenewJWT_Handler,
		},
		{
			MethodName: "Register",
			Handler:    _JWTIS_Register_Handler,
		},
		{
			MethodName: "UpdateKeys",
			Handler:    _JWTIS_UpdateKeys_Handler,
		},
		{
			MethodName: "DelKeys",
			Handler:    _JWTIS_DelKeys_Handler,
		},
		{
			MethodName: "PublicKeys",
			Handler:    _JWTIS_PublicKeys_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/pb/svc.proto",
}

func (m *NewTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.Claims) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Claims)))
		i += copy(dAtA[i:], m.Claims)
	}
	return i, nil
}

func (m *RenewTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if len(m.RefreshStrategy) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshStrategy)))
		i += copy(dAtA[i:], m.RefreshStrategy)
	}
	return i, nil
}

func (m *TokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Expiry))
	}
	return i, nil
}

func (m *Token) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Token) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.TokenType) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.TokenType)))
		i += copy(dAtA[i:], m.TokenType)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Expiry))
	}
	if len(m.raw) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.raw)))
		i += copy(dAtA[i:], m.raw)
	}
	return i, nil
}

func (m *RegisterClientRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterClientRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x10
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Expiry))
	}
	if len(m.SigAlg) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.SigAlg)))
		i += copy(dAtA[i:], m.SigAlg)
	}
	if m.SigBits != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.SigBits))
	}
	if len(m.EncAlg) > 0 {
		dAtA[i] = 0x2a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.EncAlg)))
		i += copy(dAtA[i:], m.EncAlg)
	}
	if m.EncBits != 0 {
		dAtA[i] = 0x30
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.EncBits))
	}
	if m.AuthTTL != 0 {
		dAtA[i] = 0x38
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.AuthTTL))
	}
	if m.RefreshTTL != 0 {
		dAtA[i] = 0x40
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.RefreshTTL))
	}
	if len(m.RefreshStrategy) > 0 {
		dAtA[i] = 0x4a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshStrategy)))
		i += copy(dAtA[i:], m.RefreshStrategy)
	}
	return i, nil
}

func (m *RegisterClientResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RegisterClientResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.ClientToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ClientToken)))
		i += copy(dAtA[i:], m.ClientToken)
	}
	if len(m.PubSigKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PubSigKey)))
		i += copy(dAtA[i:], m.PubSigKey)
	}
	if len(m.PubEncKey) > 0 {
		dAtA[i] = 0x22
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PubEncKey)))
		i += copy(dAtA[i:], m.PubEncKey)
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x28
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Expiry))
	}
	if m.Valid {
		dAtA[i] = 0x30
		i++
		if m.Valid {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i++
	}
	return i, nil
}

func (m *PubKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	return i, nil
}

func (m *PubKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *PubKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.PubSigKey) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PubSigKey)))
		i += copy(dAtA[i:], m.PubSigKey)
	}
	if len(m.PubEncKey) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.PubEncKey)))
		i += copy(dAtA[i:], m.PubEncKey)
	}
	return i, nil
}

func (m *DelKeysRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelKeysRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	return i, nil
}

func (m *DelKeysResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DelKeysResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func encodeVarintSvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Claims)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *RenewTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RefreshStrategy)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *TokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSvc(uint64(m.Expiry))
	}
	return n
}

func (m *Token) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.TokenType)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSvc(uint64(m.Expiry))
	}
	l = len(m.raw)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *RegisterClientRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSvc(uint64(m.Expiry))
	}
	l = len(m.SigAlg)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.SigBits != 0 {
		n += 1 + sovSvc(uint64(m.SigBits))
	}
	l = len(m.EncAlg)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.EncBits != 0 {
		n += 1 + sovSvc(uint64(m.EncBits))
	}
	if m.AuthTTL != 0 {
		n += 1 + sovSvc(uint64(m.AuthTTL))
	}
	if m.RefreshTTL != 0 {
		n += 1 + sovSvc(uint64(m.RefreshTTL))
	}
	l = len(m.RefreshStrategy)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *RegisterClientResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.ClientToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PubSigKey)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PubEncKey)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSvc(uint64(m.Expiry))
	}
	if m.Valid {
		n += 2
	}
	return n
}

func (m *PubKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *PubKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PubSigKey)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.PubEncKey)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DelKeysRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *DelKeysResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims[:0], dAtA[iNdEx:postIndex]...)
			if m.Claims == nil {
				m.Claims = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Token) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Token: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Token: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field TokenType", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.TokenType = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field raw", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.raw = append(m.raw[:0], dAtA[iNdEx:postIndex]...)
			if m.raw == nil {
				m.raw = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterClientRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterClientRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterClientRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigAlg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SigAlg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SigBits", wireType)
			}
			m.SigBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.SigBits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncAlg", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EncAlg = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field EncBits", wireType)
			}
			m.EncBits = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.EncBits |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AuthTTL", wireType)
			}
			m.AuthTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.AuthTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshTTL", wireType)
			}
			m.RefreshTTL = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.RefreshTTL |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RegisterClientResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RegisterClientResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RegisterClientResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubSigKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubSigKey = append(m.PubSigKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubSigKey == nil {
				m.PubSigKey = []byte{}
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubEncKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubEncKey = append(m.PubEncKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubEncKey == nil {
				m.PubEncKey = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Valid", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Valid = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *PubKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: PubKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: PubKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubSigKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubSigKey = append(m.PubSigKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubSigKey == nil {
				m.PubSigKey = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field PubEncKey", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.PubEncKey = append(m.PubEncKey[:0], dAtA[iNdEx:postIndex]...)
			if m.PubEncKey == nil {
				m.PubEncKey = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelKeysRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelKeysRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelKeysRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DelKeysResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DelKeysResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DelKeysResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)
