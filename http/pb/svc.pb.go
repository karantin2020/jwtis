// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: http/pb/svc.proto

package jwtispb

import (
	context "context"
	fmt "fmt"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/gogo/protobuf/proto"
	_ "github.com/grpc-ecosystem/grpc-gateway/protoc-gen-swagger/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	io "io"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion2 // please upgrade the proto package

// NewTokenRequest contains new token info
type NewTokenRequest struct {
	Kid    string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	Claims []byte `protobuf:"bytes,2,opt,name=claims,proto3" json:"claims,omitempty"`
}

func (m *NewTokenRequest) Reset()         { *m = NewTokenRequest{} }
func (m *NewTokenRequest) String() string { return proto.CompactTextString(m) }
func (*NewTokenRequest) ProtoMessage()    {}
func (*NewTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a4228fd37c699da, []int{0}
}
func (m *NewTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *NewTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_NewTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *NewTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_NewTokenRequest.Merge(m, src)
}
func (m *NewTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *NewTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_NewTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_NewTokenRequest proto.InternalMessageInfo

func (m *NewTokenRequest) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *NewTokenRequest) GetClaims() []byte {
	if m != nil {
		return m.Claims
	}
	return nil
}

// TokenResponse is sent for token request
type TokenResponse struct {
	ID           string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	AccessToken  string `protobuf:"bytes,2,opt,name=accessToken,proto3" json:"accessToken,omitempty"`
	RefreshToken string `protobuf:"bytes,3,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	Expiry       int64  `protobuf:"varint,4,opt,name=expiry,proto3" json:"expiry,omitempty"`
}

func (m *TokenResponse) Reset()         { *m = TokenResponse{} }
func (m *TokenResponse) String() string { return proto.CompactTextString(m) }
func (*TokenResponse) ProtoMessage()    {}
func (*TokenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a4228fd37c699da, []int{1}
}
func (m *TokenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TokenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TokenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TokenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TokenResponse.Merge(m, src)
}
func (m *TokenResponse) XXX_Size() int {
	return m.Size()
}
func (m *TokenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_TokenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_TokenResponse proto.InternalMessageInfo

func (m *TokenResponse) GetID() string {
	if m != nil {
		return m.ID
	}
	return ""
}

func (m *TokenResponse) GetAccessToken() string {
	if m != nil {
		return m.AccessToken
	}
	return ""
}

func (m *TokenResponse) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *TokenResponse) GetExpiry() int64 {
	if m != nil {
		return m.Expiry
	}
	return 0
}

// RenewTokenRequest contains renew token info
type RenewTokenRequest struct {
	Kid             string `protobuf:"bytes,1,opt,name=kid,proto3" json:"kid,omitempty"`
	RefreshToken    string `protobuf:"bytes,2,opt,name=refreshToken,proto3" json:"refreshToken,omitempty"`
	RefreshStrategy string `protobuf:"bytes,3,opt,name=refreshStrategy,proto3" json:"refreshStrategy,omitempty"`
}

func (m *RenewTokenRequest) Reset()         { *m = RenewTokenRequest{} }
func (m *RenewTokenRequest) String() string { return proto.CompactTextString(m) }
func (*RenewTokenRequest) ProtoMessage()    {}
func (*RenewTokenRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a4228fd37c699da, []int{2}
}
func (m *RenewTokenRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *RenewTokenRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_RenewTokenRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *RenewTokenRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_RenewTokenRequest.Merge(m, src)
}
func (m *RenewTokenRequest) XXX_Size() int {
	return m.Size()
}
func (m *RenewTokenRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_RenewTokenRequest.DiscardUnknown(m)
}

var xxx_messageInfo_RenewTokenRequest proto.InternalMessageInfo

func (m *RenewTokenRequest) GetKid() string {
	if m != nil {
		return m.Kid
	}
	return ""
}

func (m *RenewTokenRequest) GetRefreshToken() string {
	if m != nil {
		return m.RefreshToken
	}
	return ""
}

func (m *RenewTokenRequest) GetRefreshStrategy() string {
	if m != nil {
		return m.RefreshStrategy
	}
	return ""
}

// ErrorResponse describes response if service responses with error
type Error struct {
	Code    int32    `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Message string   `protobuf:"bytes,2,opt,name=message,proto3" json:"message,omitempty"`
	Details []string `protobuf:"bytes,3,rep,name=details,proto3" json:"details,omitempty"`
}

func (m *Error) Reset()         { *m = Error{} }
func (m *Error) String() string { return proto.CompactTextString(m) }
func (*Error) ProtoMessage()    {}
func (*Error) Descriptor() ([]byte, []int) {
	return fileDescriptor_5a4228fd37c699da, []int{3}
}
func (m *Error) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Error) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Error.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalTo(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Error) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Error.Merge(m, src)
}
func (m *Error) XXX_Size() int {
	return m.Size()
}
func (m *Error) XXX_DiscardUnknown() {
	xxx_messageInfo_Error.DiscardUnknown(m)
}

var xxx_messageInfo_Error proto.InternalMessageInfo

func (m *Error) GetCode() int32 {
	if m != nil {
		return m.Code
	}
	return 0
}

func (m *Error) GetMessage() string {
	if m != nil {
		return m.Message
	}
	return ""
}

func (m *Error) GetDetails() []string {
	if m != nil {
		return m.Details
	}
	return nil
}

func init() {
	proto.RegisterType((*NewTokenRequest)(nil), "jwtispb.NewTokenRequest")
	proto.RegisterType((*TokenResponse)(nil), "jwtispb.TokenResponse")
	proto.RegisterType((*RenewTokenRequest)(nil), "jwtispb.RenewTokenRequest")
	proto.RegisterType((*Error)(nil), "jwtispb.Error")
}

func init() { proto.RegisterFile("http/pb/svc.proto", fileDescriptor_5a4228fd37c699da) }

var fileDescriptor_5a4228fd37c699da = []byte{
	// 774 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xa4, 0x54, 0x41, 0x6f, 0xe4, 0x34,
	0x14, 0x6e, 0x92, 0x4e, 0x4b, 0x4d, 0x97, 0xee, 0x1a, 0xa9, 0x1a, 0x8d, 0xd0, 0xac, 0x15, 0xb4,
	0xd0, 0x5d, 0xda, 0x24, 0x9b, 0x76, 0x91, 0x18, 0x4e, 0x5d, 0x01, 0x52, 0xe7, 0x50, 0xa4, 0xb4,
	0x52, 0xcf, 0x9e, 0xe4, 0x35, 0xe3, 0x76, 0x62, 0x07, 0xdb, 0x99, 0xec, 0x5c, 0xe1, 0x0f, 0xa0,
	0x22, 0x84, 0xc4, 0x1f, 0x40, 0x42, 0xfc, 0x0a, 0xc4, 0x61, 0x8f, 0x2b, 0x71, 0x41, 0x1c, 0x56,
	0x68, 0xca, 0x89, 0x5f, 0x81, 0xe2, 0xa4, 0xa3, 0xe9, 0xb4, 0x15, 0x42, 0x7b, 0x8a, 0xdf, 0xf3,
	0xf7, 0xf9, 0xd9, 0xdf, 0xf7, 0xf2, 0xd0, 0x83, 0xa1, 0xd6, 0xb9, 0x9f, 0x0f, 0x7c, 0x35, 0x8e,
	0xbd, 0x5c, 0x0a, 0x2d, 0xf0, 0xea, 0x59, 0xa9, 0x99, 0xca, 0x07, 0x9d, 0xf7, 0x52, 0x21, 0xd2,
	0x11, 0xf8, 0x34, 0x67, 0x3e, 0xe5, 0x5c, 0x68, 0xaa, 0x99, 0xe0, 0xaa, 0x86, 0x75, 0xb6, 0xcd,
	0x27, 0xde, 0x49, 0x81, 0xef, 0xa8, 0x92, 0xa6, 0x29, 0x48, 0x5f, 0xe4, 0x06, 0x71, 0x0b, 0x7a,
	0x27, 0x65, 0x7a, 0x58, 0x0c, 0xbc, 0x58, 0x64, 0x7e, 0x2a, 0x52, 0xe1, 0x9b, 0xf4, 0xa0, 0x38,
	0x35, 0x91, 0x09, 0xcc, 0xaa, 0x86, 0xbb, 0x9f, 0xa2, 0x8d, 0x43, 0x28, 0x8f, 0xc5, 0x39, 0xf0,
	0x08, 0xbe, 0x2a, 0x40, 0x69, 0x7c, 0x1f, 0x39, 0xe7, 0x2c, 0x69, 0x5b, 0xc4, 0xda, 0x5a, 0x8b,
	0xaa, 0x25, 0xde, 0x44, 0x2b, 0xf1, 0x88, 0xb2, 0x4c, 0xb5, 0x6d, 0x62, 0x6d, 0xad, 0x47, 0x4d,
	0xe4, 0x7e, 0x6f, 0xa1, 0x7b, 0x0d, 0x55, 0xe5, 0x82, 0x2b, 0xc0, 0x1f, 0x20, 0xfb, 0x8a, 0xfa,
	0x7c, 0x73, 0xfa, 0xfa, 0xa1, 0x7d, 0xf0, 0xd9, 0x3f, 0xaf, 0x1f, 0xae, 0xb3, 0x64, 0x5b, 0x64,
	0x4c, 0x43, 0x96, 0xeb, 0x49, 0x64, 0xb3, 0x04, 0x13, 0xf4, 0x36, 0x8d, 0x63, 0x50, 0xca, 0xd0,
	0xcd, 0xb1, 0x6b, 0xd1, 0x7c, 0x0a, 0xbb, 0x68, 0x5d, 0xc2, 0xa9, 0x04, 0x35, 0xac, 0x21, 0x8e,
	0x81, 0x5c, 0xcb, 0x55, 0xf7, 0x82, 0x17, 0x39, 0x93, 0x93, 0xf6, 0x32, 0xb1, 0xb6, 0x9c, 0xa8,
	0x89, 0x5c, 0x85, 0x1e, 0x44, 0xc0, 0xff, 0xf3, 0x59, 0x8b, 0x25, 0xec, 0x5b, 0x4a, 0x6c, 0xa1,
	0x8d, 0x26, 0x3e, 0xd2, 0x92, 0x6a, 0x48, 0x27, 0xcd, 0x4d, 0x16, 0xd3, 0xee, 0x97, 0xa8, 0xf5,
	0xb9, 0x94, 0x42, 0x62, 0x8c, 0x96, 0x63, 0x91, 0x80, 0xa9, 0xd4, 0x8a, 0xcc, 0x1a, 0xb7, 0xd1,
	0x6a, 0x06, 0x4a, 0xd1, 0x14, 0x9a, 0x2a, 0x57, 0x61, 0xb5, 0x93, 0x80, 0xa6, 0x6c, 0xa4, 0xda,
	0x0e, 0x71, 0xaa, 0x9d, 0x26, 0x0c, 0x7f, 0x6a, 0xa1, 0x56, 0xff, 0xe4, 0xf8, 0xe0, 0x08, 0xff,
	0x60, 0xa3, 0x95, 0x43, 0x28, 0xfb, 0x27, 0xc7, 0xb8, 0xed, 0x35, 0x4d, 0xe3, 0x2d, 0xd8, 0xd6,
	0xd9, 0x9c, 0xed, 0x5c, 0xb3, 0xc4, 0xfd, 0xd3, 0xba, 0xd8, 0xff, 0xcd, 0xc2, 0x9b, 0x47, 0x45,
	0x96, 0x51, 0x39, 0xe9, 0x91, 0x43, 0x28, 0x49, 0xff, 0xe4, 0x98, 0xe8, 0x0a, 0xd6, 0x79, 0xf7,
	0x40, 0xa9, 0x02, 0x08, 0x9f, 0x4f, 0xf6, 0x03, 0xe4, 0xec, 0x05, 0x01, 0x7e, 0x8c, 0x3e, 0x8c,
	0x40, 0x17, 0x92, 0x43, 0x42, 0xca, 0x21, 0x70, 0xc2, 0xf8, 0x98, 0x8e, 0x58, 0x42, 0x64, 0x5d,
	0x93, 0x24, 0x54, 0x53, 0xa2, 0x80, 0xeb, 0xfe, 0x76, 0xc5, 0xd8, 0xc3, 0x8f, 0xd0, 0xfb, 0xd7,
	0x19, 0xb1, 0x9c, 0xe4, 0x5a, 0x90, 0x73, 0x98, 0x28, 0xc2, 0x85, 0x26, 0xa7, 0xa2, 0xe0, 0x49,
	0xff, 0x19, 0x72, 0x9e, 0x05, 0x01, 0xf6, 0xd0, 0xf6, 0xe2, 0xf9, 0x1a, 0x24, 0xa7, 0x23, 0xa2,
	0x40, 0x8e, 0x41, 0x12, 0xa8, 0x04, 0x25, 0x43, 0x3a, 0x06, 0x92, 0x0a, 0xfd, 0xf5, 0xef, 0x7f,
	0x7f, 0x67, 0xaf, 0xbb, 0xab, 0x3e, 0x87, 0xf2, 0xac, 0xd4, 0x3d, 0xeb, 0x09, 0xfe, 0xc6, 0x41,
	0x6f, 0x19, 0xab, 0x2b, 0x6d, 0x3a, 0x33, 0x05, 0x6e, 0xb8, 0x7f, 0xa7, 0x3a, 0xbf, 0xda, 0x17,
	0xfb, 0x3f, 0xdb, 0xb8, 0x3d, 0x53, 0xc7, 0x50, 0xe7, 0xf4, 0xd9, 0x58, 0x48, 0xfc, 0xcf, 0x97,
	0x7e, 0x5c, 0xa1, 0x77, 0xb1, 0x8f, 0x76, 0x6e, 0x57, 0xb2, 0x61, 0xe5, 0x92, 0x65, 0x4c, 0xb3,
	0x31, 0x28, 0x02, 0x2f, 0x98, 0x6a, 0xf4, 0xfc, 0xe4, 0x66, 0x95, 0xa6, 0xeb, 0xea, 0xbb, 0x10,
	0xd3, 0xef, 0x90, 0xf4, 0x43, 0xe4, 0xec, 0x85, 0x21, 0xfe, 0x08, 0x3d, 0xbe, 0xcb, 0xaf, 0x9a,
	0x55, 0xff, 0xb7, 0xb5, 0x63, 0x6f, 0xe0, 0xc1, 0x3b, 0xee, 0x9a, 0x2f, 0x61, 0xe6, 0xc2, 0xf3,
	0x97, 0xd6, 0xc5, 0xfe, 0x2f, 0x16, 0xfe, 0x02, 0xdd, 0x33, 0xfd, 0x6a, 0x98, 0x2c, 0x06, 0xd7,
	0xbb, 0x6a, 0xe0, 0x47, 0xd5, 0xf0, 0x53, 0x3d, 0xdf, 0x9f, 0x1b, 0x4e, 0xe7, 0x54, 0x52, 0xae,
	0x19, 0x0f, 0x83, 0x30, 0xf0, 0x8d, 0x39, 0x61, 0x2b, 0xf0, 0x9e, 0x7a, 0x4f, 0x9f, 0xd8, 0x96,
	0x1d, 0xde, 0xa7, 0x79, 0x3e, 0x62, 0xb1, 0x19, 0x6d, 0xfe, 0x99, 0x12, 0xbc, 0x77, 0x23, 0x13,
	0xf5, 0x6a, 0x27, 0x76, 0x17, 0x5f, 0xad, 0x87, 0x40, 0x24, 0x28, 0x51, 0xc8, 0x18, 0x48, 0x22,
	0xa0, 0xf6, 0xc3, 0xe8, 0x8a, 0x57, 0xd0, 0xf2, 0x8f, 0xb6, 0xb5, 0xfa, 0x72, 0xda, 0xb5, 0x5e,
	0x4d, 0xbb, 0xd6, 0x5f, 0xd3, 0xae, 0xf5, 0xed, 0x65, 0x77, 0xe9, 0xd5, 0x65, 0x77, 0xe9, 0x8f,
	0xcb, 0xee, 0xd2, 0x60, 0xc5, 0x8c, 0xc5, 0xdd, 0x7f, 0x03, 0x00, 0x00, 0xff, 0xff, 0xeb, 0x95,
	0xb4, 0xd4, 0xaf, 0x05, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// JWTISClient is the client API for JWTIS service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JWTISClient interface {
	NewJWT(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
	RenewJWT(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error)
}

type jWTISClient struct {
	cc *grpc.ClientConn
}

func NewJWTISClient(cc *grpc.ClientConn) JWTISClient {
	return &jWTISClient{cc}
}

func (c *jWTISClient) NewJWT(ctx context.Context, in *NewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/NewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jWTISClient) RenewJWT(ctx context.Context, in *RenewTokenRequest, opts ...grpc.CallOption) (*TokenResponse, error) {
	out := new(TokenResponse)
	err := c.cc.Invoke(ctx, "/jwtispb.JWTIS/RenewJWT", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JWTISServer is the server API for JWTIS service.
type JWTISServer interface {
	NewJWT(context.Context, *NewTokenRequest) (*TokenResponse, error)
	RenewJWT(context.Context, *RenewTokenRequest) (*TokenResponse, error)
}

func RegisterJWTISServer(s *grpc.Server, srv JWTISServer) {
	s.RegisterService(&_JWTIS_serviceDesc, srv)
}

func _JWTIS_NewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(NewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).NewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/NewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).NewJWT(ctx, req.(*NewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _JWTIS_RenewJWT_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RenewTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JWTISServer).RenewJWT(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/jwtispb.JWTIS/RenewJWT",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JWTISServer).RenewJWT(ctx, req.(*RenewTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _JWTIS_serviceDesc = grpc.ServiceDesc{
	ServiceName: "jwtispb.JWTIS",
	HandlerType: (*JWTISServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewJWT",
			Handler:    _JWTIS_NewJWT_Handler,
		},
		{
			MethodName: "RenewJWT",
			Handler:    _JWTIS_RenewJWT_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "http/pb/svc.proto",
}

func (m *NewTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *NewTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.Claims) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Claims)))
		i += copy(dAtA[i:], m.Claims)
	}
	return i, nil
}

func (m *TokenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TokenResponse) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ID) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.ID)))
		i += copy(dAtA[i:], m.ID)
	}
	if len(m.AccessToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.AccessToken)))
		i += copy(dAtA[i:], m.AccessToken)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if m.Expiry != 0 {
		dAtA[i] = 0x20
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Expiry))
	}
	return i, nil
}

func (m *RenewTokenRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *RenewTokenRequest) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Kid) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Kid)))
		i += copy(dAtA[i:], m.Kid)
	}
	if len(m.RefreshToken) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshToken)))
		i += copy(dAtA[i:], m.RefreshToken)
	}
	if len(m.RefreshStrategy) > 0 {
		dAtA[i] = 0x1a
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.RefreshStrategy)))
		i += copy(dAtA[i:], m.RefreshStrategy)
	}
	return i, nil
}

func (m *Error) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Error) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Code != 0 {
		dAtA[i] = 0x8
		i++
		i = encodeVarintSvc(dAtA, i, uint64(m.Code))
	}
	if len(m.Message) > 0 {
		dAtA[i] = 0x12
		i++
		i = encodeVarintSvc(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	if len(m.Details) > 0 {
		for _, s := range m.Details {
			dAtA[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				dAtA[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			dAtA[i] = uint8(l)
			i++
			i += copy(dAtA[i:], s)
		}
	}
	return i, nil
}

func encodeVarintSvc(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *NewTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.Claims)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *TokenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ID)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.AccessToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if m.Expiry != 0 {
		n += 1 + sovSvc(uint64(m.Expiry))
	}
	return n
}

func (m *RenewTokenRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Kid)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RefreshToken)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	l = len(m.RefreshStrategy)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	return n
}

func (m *Error) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Code != 0 {
		n += 1 + sovSvc(uint64(m.Code))
	}
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovSvc(uint64(l))
	}
	if len(m.Details) > 0 {
		for _, s := range m.Details {
			l = len(s)
			n += 1 + l + sovSvc(uint64(l))
		}
	}
	return n
}

func sovSvc(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozSvc(x uint64) (n int) {
	return sovSvc(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *NewTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: NewTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: NewTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Claims", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Claims = append(m.Claims[:0], dAtA[iNdEx:postIndex]...)
			if m.Claims == nil {
				m.Claims = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TokenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TokenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TokenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field AccessToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.AccessToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Expiry", wireType)
			}
			m.Expiry = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Expiry |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *RenewTokenRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: RenewTokenRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: RenewTokenRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Kid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Kid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshToken", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshToken = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RefreshStrategy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RefreshStrategy = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Error) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Error: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Error: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Code", wireType)
			}
			m.Code = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Code |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Details", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthSvc
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthSvc
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Details = append(m.Details, string(dAtA[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipSvc(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthSvc
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipSvc(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowSvc
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowSvc
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthSvc
			}
			iNdEx += length
			if iNdEx < 0 {
				return 0, ErrInvalidLengthSvc
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowSvc
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipSvc(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
				if iNdEx < 0 {
					return 0, ErrInvalidLengthSvc
				}
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthSvc = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowSvc   = fmt.Errorf("proto: integer overflow")
)
