syntax = "proto3";

// import "google/protobuf/timestamp.proto";
import "google/api/annotations.proto";
// import "google/protobuf/any.proto";
import "protoc-gen-swagger/options/annotations.proto";
import "github.com/gogo/protobuf/gogoproto/gogo.proto";

package jwtispb;

option (grpc.gateway.protoc_gen_swagger.options.openapiv2_swagger) = {
  info: {
    title: "JWTIS service";
    version: "0.1.1";
    contact: {
      name: "JWTIS";
      url: "https://github.com/karantin2020/jwtis";
        };
    };
    schemes: [HTTP,HTTPS];
    consumes: "application/json";
    produces: "application/json";
    responses: {
    key: "404";
    value: {
      description: "Returned when the resource does not exist";
      schema: {
        json_schema: {
          type: STRING;
        }
      }
    }
  }
};

// NewTokenRequest contains new token info
message NewTokenRequest {
  string kid    = 1;
  bytes  claims = 2;
};

// TokenResponse is sent for token request
message TokenResponse {
  string id           = 1 [(gogoproto.jsontag) = "id,omitempty",(gogoproto.customname)="ID"];
  string accessToken  = 2;
  string refreshToken = 3;
  int64  expiry       = 4;
};

// RenewTokenRequest contains renew token info
message RenewTokenRequest {
  string kid             = 1;
  string refreshToken    = 2;
  string refreshStrategy = 3;
};

// ErrorResponse describes response if service responses with error
message Error {
	int32           code    = 1;
  string          message = 2;
  repeated string details = 3;
};

service JWTIS {
    rpc NewJWT (NewTokenRequest) returns (TokenResponse) {
      option (google.api.http) = {
          post: "/newjwt"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        description: "Issue new JWT token"
        summary: "Summary: New JWT token"
        responses: {
          key: "400"
          value: {
            description: "Returned when invalid request data sent"
          }
        };
        responses: {
          key: "404"
          value: {
            description: "Returned when crypto keys not found"
          }
        };
        responses: {
          key: "500"
          value: {
            description: "Returned when internal server error have got"
          }
        };
      };
    };
    rpc RenewJWT (RenewTokenRequest) returns (TokenResponse) {
      option (google.api.http) = {
          post: "/renewjwt"
          body: "*"
      };
      option (grpc.gateway.protoc_gen_swagger.options.openapiv2_operation) = {
        description: "Renew JWT token";
        summary: "Summary: Renew JWT token";
        responses: {
          key: "404"
          value: {
            description: "Returned when crypto keys not found"
          }
        };
        responses: {
          key: "403"
          value: {
            description: "Returned when invalid crypto primitives exist"
          }
        };
        responses: {
          key: "409"
          value: {
            description: "Returned when refresh token expired"
          }
        };
        responses: {
          key: "422"
          value: {
            description: "Returned when invalid refresh claims sent"
          }
        };
        responses: {
          key: "500"
          value: {
            description: "Returned when internal server error have got"
          }
        };
      };
    };
};
