syntax = "proto3";

import "github.com/gogo/protobuf/gogoproto/gogo.proto";
option go_package = "github.com/karantin2020/jwtis/pkg/grpc/pb";
package pb;

// The JWTISService service definition.
service JWTISService {
  rpc NewJWT(NewJWTRequest) returns (NewJWTReply);
  rpc RenewJWT(RenewJWTRequest) returns (RenewJWTReply);
  rpc RevokeJWT(RevokeJWTRequest) returns (RevokeJWTReply);
  rpc Auth(AuthRequest) returns (AuthReply);
  rpc Register(RegisterRequest) returns (RegisterReply);
  rpc UpdateKeys(UpdateKeysRequest) returns (UpdateKeysReply);
  rpc ListKeys(ListKeysRequest) returns (ListKeysReply);
  rpc DelKeys(DelKeysRequest) returns (DelKeysReply);
  rpc PublicKeys(PublicKeysRequest) returns (PublicKeysReply);
}

message NewJWTRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  bytes claims = 2 [(gogoproto.jsontag) = "claims,omitempty"];
}

message NewJWTReply {
  string id = 1 [(gogoproto.jsontag) = "id", (gogoproto.customname) = "ID"];
  string accessToken = 2 [(gogoproto.jsontag) = "access_token"];
  string refreshToken = 3 [(gogoproto.jsontag) = "refresh_token"];
  int64 expiry = 4 [(gogoproto.jsontag) = "expiry"];
}

message RenewJWTRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  string refreshToken = 2 [(gogoproto.jsontag) = "refresh_token"];
  string refreshStrategy = 3
      [(gogoproto.jsontag) = "refresh_strategy,omitempty"];
}

message RenewJWTReply {
  string id = 1 [(gogoproto.jsontag) = "id", (gogoproto.customname) = "ID"];
  string accessToken = 2 [(gogoproto.jsontag) = "access_token"];
  string refreshToken = 3 [(gogoproto.jsontag) = "refresh_token"];
  int64 expiry = 4 [(gogoproto.jsontag) = "expiry"];
}

message RevokeJWTRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  string id = 2 [(gogoproto.jsontag) = "id", (gogoproto.customname) = "ID"];
  string refreshToken = 3 [(gogoproto.jsontag) = "refresh_token"];
}

message RevokeJWTReply {}

message AuthRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
}

message AuthReply {
  // JWT that can be used for authz
  string authJWT = 1 [(gogoproto.jsontag) = "auth_jwt"];
}

message RegisterRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  int64 expiry = 2 [(gogoproto.jsontag) = "expiry,omitempty"];

  string sigAlg = 3 [(gogoproto.jsontag) = "sig_alg,omitempty"];
  int32 sigBits = 4 [(gogoproto.jsontag) = "sig_bits,omitempty"];
  string encAlg = 5 [(gogoproto.jsontag) = "enc_alg,omitempty"];
  int32 encBits = 6 [(gogoproto.jsontag) = "enc_bits,omitempty"];

  int64 authTTL = 7 [(gogoproto.jsontag) = "auth_ttl,omitempty"];
  int64 refreshTTL = 8 [(gogoproto.jsontag) = "refresh_ttl,omitempty"];

  // RefreshStrategy is used in RenewJWT to decide wheather to issue new refresh
  // token with access token or not this option applies to all renewJWT requests
  string refreshStrategy = 9
      [(gogoproto.jsontag) = "refresh_strategy,omitempty"];
}

message RegisterReply {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  string authJWT = 2 [(gogoproto.jsontag) = "auth_jwt"];
  bytes pubSigKey = 3 [(gogoproto.jsontag) = "pub_sig_key"];
  bytes pubEncKey = 4 [(gogoproto.jsontag) = "pub_enc_key"];
  int64 expiry = 5 [(gogoproto.jsontag) = "expiry"];
  bool valid = 6 [(gogoproto.jsontag) = "valid"];
  string refreshStrategy = 7 [(gogoproto.jsontag) = "refresh_strategy"];
}

message UpdateKeysRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  int64 expiry = 2 [(gogoproto.jsontag) = "expiry,omitempty"];

  string sigAlg = 3 [(gogoproto.jsontag) = "sig_alg,omitempty"];
  int32 sigBits = 4 [(gogoproto.jsontag) = "sig_bits,omitempty"];
  string encAlg = 5 [(gogoproto.jsontag) = "enc_alg,omitempty"];
  int32 encBits = 6 [(gogoproto.jsontag) = "enc_bits,omitempty"];

  int64 authTTL = 7 [(gogoproto.jsontag) = "auth_ttl,omitempty"];
  int64 refreshTTL = 8 [(gogoproto.jsontag) = "refresh_ttl,omitempty"];

  // RefreshStrategy is used in RenewJWT to decide wheather to issue new refresh
  // token with access token or not this option applies to all renewJWT requests
  string refreshStrategy = 9
      [(gogoproto.jsontag) = "refresh_strategy,omitempty"];
}

message UpdateKeysReply {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  string authJWT = 2 [(gogoproto.jsontag) = "auth_jwt"];
  bytes pubSigKey = 3 [(gogoproto.jsontag) = "pub_sig_key"];
  bytes pubEncKey = 4 [(gogoproto.jsontag) = "pub_enc_key"];
  int64 expiry = 5 [(gogoproto.jsontag) = "expiry"];
  bool valid = 6 [(gogoproto.jsontag) = "valid"];
  string refreshStrategy = 7 [(gogoproto.jsontag) = "refresh_strategy"];
}

message ListKeysRequest {
  string query = 1 [(gogoproto.jsontag) = "query"];
}

// KeysInfo holds all keys info
message KeysInfo {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  int64 expiry = 2 [(gogoproto.jsontag) = "expiry"];
  int64 authTTL = 3 [(gogoproto.jsontag) = "auth_ttl"];
  int64 refreshTTL = 4 [(gogoproto.jsontag) = "refresh_ttl"];
  string refreshStrategy = 5 [(gogoproto.jsontag) = "refresh_strategy"];
  bytes pubSigKey = 6 [(gogoproto.jsontag) = "pub_sig_key"];
  bytes pubEncKey = 7 [(gogoproto.jsontag) = "pub_enc_key"];
  bool locked = 8 [(gogoproto.jsontag) = "locked"];
  bool valid = 9 [(gogoproto.jsontag) = "valid"];
  bool expired = 10 [(gogoproto.jsontag) = "expired"];
}

message ListKeysReply {
  repeated KeysInfo keys = 1 [(gogoproto.jsontag) = "keys"];
}

message DelKeysRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
}

message DelKeysReply {}

message PublicKeysRequest {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
}

message PublicKeysReply {
  string kid = 1 [(gogoproto.jsontag) = "kid", (gogoproto.customname) = "KID"];
  bytes pubSigKey = 2 [(gogoproto.jsontag) = "pub_sig_key"];
  bytes pubEncKey = 3 [(gogoproto.jsontag) = "pub_enc_key"];
  int64 expiry = 4 [(gogoproto.jsontag) = "expiry"];
  bool valid = 5 [(gogoproto.jsontag) = "valid"];
}
